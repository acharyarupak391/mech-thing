{"version":3,"sources":["App.js","index.js"],"names":["useStyles","makeStyles","imagesGrid","marginLeft","marginRight","marginTop","background","borderTopLeftRadius","borderTopRightRadius","padding","imageGrid","position","width","marginBottom","cursor","color","boxShadow","selected","image","objectFit","height","grid2","borderBottomLeftRadius","borderBottomRightRadius","inputFields","inputField","margin","App","classes","useState","selectedType","setSelectedType","thickness","setThickness","l1","setL1","l2","setL2","l3","setL3","l4","setL4","l5","setL5","totalLength","setTotalLength","findK","parseFloat","includes","error","val","k","getTotalLength","type","lengths","t","console","log","length","reduce","accumulator","currentValue","handleGridClick","e","handleThicknessChange","target","value","handleLengthChange","idx","handleButtonClick","slice","images","className","container","justify","lg","map","index","item","name","onClick","src","variant","style","disabled","onChange","Array","_","label","eval","inputProps","min","step","InputLabelProps","shrink","find","i","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.79a4b024.chunk.js","sourcesContent":["import {\r\n  Button,\r\n  Grid,\r\n  Typography,\r\n  TextField,\r\n  FormControl,\r\n  Select,\r\n  MenuItem,\r\n  InputLabel,\r\n  FormHelperText\r\n} from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useState, useEffect } from \"react\";\r\nimport \"./styles.css\";\r\n\r\nconst useStyles = makeStyles({\r\n  imagesGrid: {\r\n    // maxWidth: \"750px\",\r\n    marginLeft: \"auto\",\r\n    marginRight: \"auto\",\r\n    marginTop: 10,\r\n    background: \"rgb(86, 86, 86)\",\r\n    // borderRadius: 4,\r\n    borderTopLeftRadius: 4,\r\n    borderTopRightRadius: 4,\r\n    padding: 10\r\n  },\r\n  imageGrid: {\r\n    position: \"relative\",\r\n    width: \"170px\",\r\n    padding: 10,\r\n    marginTop: 10,\r\n    marginBottom: 10,\r\n    background: \"#272C34\",\r\n    borderTopLeftRadius: 4,\r\n    borderTopRightRadius: 4,\r\n    cursor: \"pointer\",\r\n    color: \"white\",\r\n    \"&:hover\": {\r\n      boxShadow: \"5px 5px 5px black\"\r\n    }\r\n  },\r\n  selected: {\r\n    background: \"#3F51B5\",\r\n    boxShadow: \"5px 5px 25px black\",\r\n    \"&:hover\": {\r\n      boxShadow: \"5px 5px 25px black\"\r\n    }\r\n  },\r\n  image: {\r\n    objectFit: \"fill\",\r\n    height: \"80%\"\r\n  },\r\n  grid2: {\r\n    marginLeft: \"auto\",\r\n    marginRight: \"auto\",\r\n    marginTop: 10,\r\n    padding: 10,\r\n    background: \"#A09AFF\",\r\n    borderBottomLeftRadius: 4,\r\n    borderBottomRightRadius: 4\r\n  },\r\n  inputFields: {\r\n    // border: \"1px solid\",\r\n    marginTop: \"20px\",\r\n    padding: 10\r\n  },\r\n  inputField: {\r\n    // border: \"1px solid\",\r\n    margin: \"5px 0\"\r\n  }\r\n});\r\n\r\nexport default function App() {\r\n  const classes = useStyles();\r\n  const [selectedType, setSelectedType] = useState(0);\r\n  const [thickness, setThickness] = useState(\"\");\r\n  const [l1, setL1] = useState(\"\");\r\n  const [l2, setL2] = useState(\"\");\r\n  const [l3, setL3] = useState(\"\");\r\n  const [l4, setL4] = useState(\"\");\r\n  const [l5, setL5] = useState(\"\");\r\n  const [totalLength, setTotalLength] = useState(null);\r\n\r\n  const findK = (thickness) => {\r\n    if (\r\n      !parseFloat(thickness) ||\r\n      ![0.5, 1, 1.5, 2, 2.5, 3].includes(parseFloat(thickness))\r\n    )\r\n      return {\r\n        error:\r\n          \"thickness should be an integer and be one of the following: [0.5, 1, 1.5, 2, 2.5, 3]\"\r\n      };\r\n    thickness = parseFloat(thickness);\r\n    let val = {};\r\n    switch (thickness) {\r\n      case 0.5:\r\n        val = { k: 0.15 };\r\n        break;\r\n\r\n      case 1:\r\n        val = { k: 0.3 };\r\n        break;\r\n\r\n      case 1.5:\r\n        val = { k: 0.45 };\r\n        break;\r\n\r\n      case 2:\r\n        val = { k: 0.6 };\r\n        break;\r\n\r\n      case 2.5:\r\n        val = { k: 0.75 };\r\n        break;\r\n\r\n      case 3:\r\n        val = { k: 0.9 };\r\n        break;\r\n\r\n      default:\r\n        val = { k: null };\r\n    }\r\n    return val;\r\n  };\r\n\r\n  const getTotalLength = (type, lengths, t) => {\r\n    if (![1, 2, 3, 4].includes(type)) {\r\n      console.log({\r\n        error: \"type should be one of the following: [1, 2, 3, 4]\"\r\n      });\r\n      return { error: \"type should be one of the following: [1, 2, 3, 4]\" };\r\n    }\r\n    if (lengths.length != type + 1) {\r\n      console.log({\r\n        error: `invalid number of lenghts provided for type ${type}`\r\n      });\r\n      return { error: `invalid number of lenghts provided for type ${type}` };\r\n    }\r\n    if (findK(t).error || !findK(t).k) console.log(\"error: \", findK(t));\r\n    const k = findK(t).k;\r\n    let sumReducer = (accumulator, currentValue) => accumulator + currentValue;\r\n    return lengths.reduce(sumReducer) + k * type;\r\n  };\r\n\r\n  const handleGridClick = (e, type) => {\r\n    if (selectedType === type) setSelectedType(0);\r\n    else setSelectedType(type);\r\n    setTotalLength(null);\r\n    setL1(\"\");\r\n    setL2(\"\");\r\n    setL3(\"\");\r\n    setL4(\"\");\r\n    setL5(\"\");\r\n  };\r\n\r\n  const handleThicknessChange = (e) => {\r\n    setThickness(e.target.value);\r\n  };\r\n\r\n  const handleLengthChange = (e, idx) => {\r\n    let val = parseFloat(e.target.value) || \"\";\r\n    switch (idx) {\r\n      case 1:\r\n        setL1(val);\r\n        break;\r\n      case 2:\r\n        setL2(val);\r\n        break;\r\n      case 3:\r\n        setL3(val);\r\n        break;\r\n      case 4:\r\n        setL4(val);\r\n        break;\r\n      case 5:\r\n        setL5(val);\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const handleButtonClick = () => {\r\n    let lengths = [l1, l2, l3, l4, l5].slice(0, selectedType + 1);\r\n    setTotalLength(getTotalLength(selectedType, lengths, thickness));\r\n  };\r\n\r\n  const images = [\r\n    \"/images/type 1.jpg\",\r\n    \"/images/type 2.jpg\",\r\n    \"/images/type 3.jpg\",\r\n    \"/images/type 4.jpg\"\r\n  ];\r\n  return (\r\n    <div className=\"App\">\r\n      <Grid\r\n        container\r\n        justify=\"space-evenly\"\r\n        className={classes.imagesGrid}\r\n        lg={6}\r\n      >\r\n        {images.map((image, index) => (\r\n          <Grid\r\n            item\r\n            name=\"hello\"\r\n            onClick={(e) => handleGridClick(e, index + 1)}\r\n            className={`${classes.imageGrid} ${\r\n              selectedType == index + 1 ? classes.selected : \"\"\r\n            }`}\r\n            key={index}\r\n          >\r\n            <img src={image} className={classes.image} />\r\n            <Typography>Type {index + 1}</Typography>\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n      <Grid item lg={6} className={classes.grid2}>\r\n        <Typography item variant=\"overline\">\r\n          <em>\r\n            {selectedType\r\n              ? `Type ${selectedType} selected`\r\n              : `No type selected`}\r\n          </em>\r\n        </Typography>\r\n        <br />\r\n        <FormControl style={{ marginTop: 10 }}>\r\n          <InputLabel>Thickness</InputLabel>\r\n          <Select\r\n            style={{ width: \"200px\" }}\r\n            value={thickness}\r\n            disabled={!selectedType}\r\n            onChange={(e) => handleThicknessChange(e)}\r\n          >\r\n            <MenuItem value={0.5}>0.50 mm</MenuItem>\r\n            <MenuItem value={1}>1.00 mm</MenuItem>\r\n            <MenuItem value={1.5}>1.50 mm</MenuItem>\r\n            <MenuItem value={2}>2.00 mm</MenuItem>\r\n            <MenuItem value={2.5}>2.50 mm</MenuItem>\r\n            <MenuItem value={3}>3.00 mm</MenuItem>\r\n          </Select>\r\n          <FormHelperText>\r\n            {!selectedType\r\n              ? \"Select any type to get started.\"\r\n              : \"Enter the thickness of material\"}\r\n          </FormHelperText>\r\n        </FormControl>\r\n        <Grid className={classes.inputFields} container justify=\"space-evenly\">\r\n          {selectedType > 0 &&\r\n            [...Array(selectedType + 1)].map((_, idx) => (\r\n              <Grid className={classes.inputField}>\r\n                <TextField\r\n                  label={`Enter length (L${idx + 1})`}\r\n                  onChange={(e) => handleLengthChange(e, idx + 1)}\r\n                  key={idx}\r\n                  value={eval(\"l\" + (idx + 1))}\r\n                  type=\"number\"\r\n                  variant=\"outlined\"\r\n                  inputProps={{ min: 0, step: 0.25 }}\r\n                  InputLabelProps={{shrink: !!eval(\"l\" + (idx + 1))}}\r\n                />\r\n              </Grid>\r\n            ))}\r\n        </Grid>\r\n        {selectedType > 0 ? (\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"secondary\"\r\n            disabled={\r\n              [l1, l2, l3, l4, l5].find(\r\n                (e, i) => e === \"\" && i <= selectedType\r\n              ) === \"\" ||\r\n              [l1, l2, l3, l4, l5].find((e) => e < 0) ||\r\n              !thickness\r\n            }\r\n            onClick={() => handleButtonClick()}\r\n            style={{ marginBottom: 10 }}\r\n          >\r\n            Calculate Total Length\r\n          </Button>\r\n        ) : (\r\n          <></>\r\n        )}\r\n        {totalLength && (\r\n          <Typography variant=\"h5\">\r\n            Total Length: <strong>{totalLength}</strong>\r\n          </Typography>\r\n        )}\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n","import { StrictMode } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport App from \"./App\";\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(\r\n  <StrictMode>\r\n    <App />\r\n  </StrictMode>,\r\n  rootElement\r\n);\r\n"],"sourceRoot":""}